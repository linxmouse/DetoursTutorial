// dear imgui: standalone example application for GLFW + OpenGL 3, using programmable pipeline
// If you are new to dear imgui, see examples/README.txt and documentation at the top of imgui.cpp.
// (GLFW is a cross-platform general purpose library for handling windows, inputs, OpenGL/Vulkan/Metal graphics context creation, etc.)



#include <Windows.h>
#include <stdio.h>
#include "imgui.h"
#include "imgui_impl_win32.h"
#include "imgui_impl_opengl3.h"
#include "imgui_internal.h"
#include <GL/gl3w.h>
#include <gl/GL.h>
#include <tchar.h>

#include "MinHook/include/MinHook.h"
#pragma comment(lib,"libMinHook.x64.lib")
#include <iostream>

// [Win32] Our example includes a copy of glfw3.lib pre-compiled with VS2010 to maximize ease of testing and compatibility with old VS compilers.
// To link with VS2010-era libraries, VS2015+ requires linking with legacy_stdio_definitions.lib, which we do using this pragma.
// Your own project should not be affected, as you are likely to link with a newer binary of GLFW that is adequate for your version of Visual Studio.
#if defined(_MSC_VER) && (_MSC_VER >= 1900) && !defined(IMGUI_DISABLE_WIN32_FUNCTIONS)
#pragma comment(lib, "legacy_stdio_definitions")
#endif

static void glfw_error_callback(int error, const char* description)
{
    fprintf(stderr, "Glfw Error %d: %s\n", error, description);
}

using namespace std;

typedef BOOL(__stdcall * twglSwapBuffers) (_In_ HDC hDc);

twglSwapBuffers owglSwapBuffers;
#include <mutex>

once_flag flag;
bool bShowMenu = false;
bool show_demo = false;
HWND hGameWnd;
WNDPROC hGameWndProc;
LRESULT  ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

LRESULT CALLBACK HOOK_WndProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    if (uMsg == WM_KEYDOWN && wParam == VK_INSERT)
    {
        bShowMenu = !bShowMenu;
        return false;
    }
    if (bShowMenu)
    {
        if (ImGui_ImplWin32_WndProcHandler(hWnd, uMsg, wParam, lParam))
        {
            if ((uMsg == WM_KEYUP || uMsg == WM_SYSKEYUP) && (wParam < 256))
                return CallWindowProc(hGameWndProc, hWnd, uMsg, wParam, lParam);
            return true;
        }
    }
    return CallWindowProc(hGameWndProc, hWnd, uMsg, wParam, lParam);
}
#define GWL_WNDPROC         (-4)

BOOL __stdcall hwglSwapBuffers(_In_ HDC hDc)
{

    std::once_flag once;
    std::call_once(once, [&]() {
        HWND game_window = WindowFromDC(hDc);
        hGameWndProc = (WNDPROC)SetWindowLong(game_window, GWL_WNDPROC, (LONG)HOOK_WndProc);
        IMGUI_CHECKVERSION();
     
        ImGui::CreateContext();
        ImGuiContext& g = *ImGui::GetCurrentContext();
        ImGuiIO& io = ImGui::GetIO(); (void)io;
        io.IniFilename = NULL;
        io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;
        const char* glsl_version = "#version 130";
        ImGui_ImplWin32_Init(game_window);
        ImGui_ImplOpenGL3_Init(glsl_version);
    });

    bool show_demo_window = true;
    bool show_another_window = false;
    ImGui_ImplOpenGL3_NewFrame();
    ImGui_ImplWin32_NewFrame();
    ImGui::NewFrame();

    static bool open;
    if (GetAsyncKeyState(VK_RSHIFT)) {
        Sleep(100);
        open = !open;
    }

    if (!open) {

        ImGui::ShowDemoWindow(&show_demo_window);
        ImGui::Begin("title"); {
            ImGui::Text("bb ");
            ImGui::End();
        }
    }
    ImGui::GetIO().MouseDrawCursor = true;
    ImGui::EndFrame();
    ImGui::Render();

    ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
 

    return owglSwapBuffers(hDc);
}